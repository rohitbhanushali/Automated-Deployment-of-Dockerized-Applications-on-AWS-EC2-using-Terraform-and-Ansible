name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  validate:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'
          
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install ansible-lint yamllint
          
      - name: Validate Ansible playbook
        run: |
          ansible-lint ansible/playbook.yml
          yamllint ansible/playbook.yml
          
      - name: Validate Terraform
        run: |
          cd terraform
          terraform init -backend=false
          terraform validate
          
  security:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'
          
  deploy:
    needs: [validate, security]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    environment: production
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
          
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r ansible/requirements.txt
          
      - name: Deploy infrastructure
        id: deploy
        run: |
          chmod +x deploy.sh
          ./deploy.sh
        env:
          PROJECT_NAME: ${{ secrets.PROJECT_NAME }}
          ENVIRONMENT: production
          REGION: ${{ secrets.AWS_REGION }}
          SSH_KEY_PATH: ${{ secrets.SSH_KEY_PATH }}
          
      - name: Verify deployment
        if: steps.deploy.outcome == 'success'
        run: |
          chmod +x scripts/verify_deployment.sh
          ./scripts/verify_deployment.sh ${{ steps.deploy.outputs.instance_ip }}
        continue-on-error: true
        
      - name: Rollback on failure
        if: failure()
        run: |
          chmod +x scripts/rollback.sh
          ./scripts/rollback.sh
        env:
          PROJECT_NAME: ${{ secrets.PROJECT_NAME }}
          ENVIRONMENT: production
          REGION: ${{ secrets.AWS_REGION }}
          SSH_KEY_PATH: ${{ secrets.SSH_KEY_PATH }}
          
      - name: Notify on failure
        if: failure()
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'Deployment failed - ${{ github.ref_name }}',
              body: 'Deployment failed for commit ${{ github.sha }}. Rollback has been initiated.'
            }) 