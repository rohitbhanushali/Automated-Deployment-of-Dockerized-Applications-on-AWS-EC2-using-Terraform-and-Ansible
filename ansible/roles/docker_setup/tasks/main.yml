---
# Update system packages
- name: Update all packages
  yum:
    name: "*"
    state: latest
  register: yum_update
  retries: 3
  delay: 5
  until: yum_update is success

# Install required packages
- name: Install required packages
  yum:
    name:
      - yum-utils
      - device-mapper-persistent-data
      - lvm2
    state: present

# Add Docker repository
- name: Add Docker repository
  yum_repository:
    name: docker-ce
    description: Docker CE Repository
    baseurl: https://download.docker.com/linux/centos/7/$basearch/stable
    gpgcheck: yes
    gpgkey: https://download.docker.com/linux/centos/gpg
    enabled: yes
  when: ansible_os_family == "RedHat"

# Install Docker
- name: Install Docker
  yum:
    name:
      - docker-ce
      - docker-ce-cli
      - containerd.io
    state: present
    update_cache: yes
  register: docker_install
  retries: 3
  delay: 5
  until: docker_install is success

# Start and enable Docker service
- name: Start Docker service
  service:
    name: docker
    state: started
    enabled: yes
  register: docker_service
  retries: 3
  delay: 5
  until: docker_service is success

# Install Docker Compose
- name: Download Docker Compose
  get_url:
    url: "https://github.com/docker/compose/releases/latest/download/docker-compose-{{ ansible_system|lower }}-{{ ansible_architecture }}"
    dest: /usr/local/bin/docker-compose
    mode: '0755'
  register: docker_compose_download
  retries: 3
  delay: 5
  until: docker_compose_download is success

# Add user to docker group
- name: Add user to docker group
  user:
    name: "{{ ansible_user }}"
    groups: docker
    append: yes
  notify: restart docker

# Create app directory
- name: Create app directory
  file:
    path: "/home/{{ ansible_user }}/app"
    state: directory
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: '0755'

# Configure Docker daemon
- name: Create Docker daemon configuration directory
  file:
    path: /etc/docker
    state: directory
    mode: '0755'

- name: Configure Docker daemon
  copy:
    content: |
      {
        "log-driver": "json-file",
        "log-opts": {
          "max-size": "100m",
          "max-file": "3"
        },
        "default-ulimits": {
          "nofile": {
            "name": "nofile",
            "hard": 64000,
            "soft": 64000
          }
        }
      }
    dest: /etc/docker/daemon.json
    mode: '0644'
  notify: restart docker